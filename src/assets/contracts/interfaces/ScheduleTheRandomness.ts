/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ScheduleTheRandomnessInterface extends utils.Interface {
  functions: {
    "ETH()": FunctionFragment;
    "airnode()": FunctionFragment;
    "airnodeRrp()": FunctionFragment;
    "cancelQualityTypeByID(bytes32)": FunctionFragment;
    "checkQualityPlanIsActive()": FunctionFragment;
    "checkerIsRandomized()": FunctionFragment;
    "components(uint8)": FunctionFragment;
    "controlId()": FunctionFragment;
    "controls(uint256)": FunctionFragment;
    "createQualityPlanTask()": FunctionFragment;
    "createTaskQualityControl()": FunctionFragment;
    "doQualityControl()": FunctionFragment;
    "employeeId()": FunctionFragment;
    "endpointIdUint256Array()": FunctionFragment;
    "expectingRequestWithIdToBeFulfilled(bytes32)": FunctionFragment;
    "fulfillRandomComponents(bytes32,bytes)": FunctionFragment;
    "gelato()": FunctionFragment;
    "getLastControlId()": FunctionFragment;
    "getRandomComponents()": FunctionFragment;
    "getRandomControlType()": FunctionFragment;
    "isRandomnize()": FunctionFragment;
    "lastLaunched()": FunctionFragment;
    "latestRandomizingBlock()": FunctionFragment;
    "makeRequestAPI3RandomComponents(uint256)": FunctionFragment;
    "nrLaunches()": FunctionFragment;
    "ops()": FunctionFragment;
    "owner()": FunctionFragment;
    "planIsActive()": FunctionFragment;
    "qrngUint256Array(uint256)": FunctionFragment;
    "qualityControlDelivered()": FunctionFragment;
    "randomness()": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestEmployeByChainlink()": FunctionFragment;
    "s_requestId()": FunctionFragment;
    "setRequestParameters(address,bytes32,address)": FunctionFragment;
    "sponsorWallet()": FunctionFragment;
    "startQualityPlan()": FunctionFragment;
    "status()": FunctionFragment;
    "stopQualityControl()": FunctionFragment;
    "taskIdByBlock(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawContract()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "airnode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "airnodeRrp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelQualityTypeByID",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkQualityPlanIsActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkerIsRandomized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "components",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "controlId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "controls",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createQualityPlanTask",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createTaskQualityControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "doQualityControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "employeeId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endpointIdUint256Array",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expectingRequestWithIdToBeFulfilled",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillRandomComponents",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "gelato", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLastControlId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomComponents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomControlType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRandomnize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastLaunched",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestRandomizingBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeRequestAPI3RandomComponents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nrLaunches",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ops", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "planIsActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "qrngUint256Array",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "qualityControlDelivered",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "randomness",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestEmployeByChainlink",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_requestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRequestParameters",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startQualityPlan",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stopQualityControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taskIdByBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawContract",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "airnode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "airnodeRrp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelQualityTypeByID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkQualityPlanIsActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkerIsRandomized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "components", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "controlId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "controls", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createQualityPlanTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTaskQualityControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doQualityControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "employeeId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endpointIdUint256Array",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expectingRequestWithIdToBeFulfilled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillRandomComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gelato", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastControlId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomControlType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRandomnize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastLaunched",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRandomizingBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeRequestAPI3RandomComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nrLaunches", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ops", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "planIsActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "qrngUint256Array",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "qualityControlDelivered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "randomness", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestEmployeByChainlink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_requestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequestParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startQualityPlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stopQualityControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taskIdByBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawContract",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "controlTypeAvailable()": EventFragment;
    "qualityControlDone()": EventFragment;
    "qualityControlStart()": EventFragment;
    "randomComponent(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "controlTypeAvailable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "qualityControlDone"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "qualityControlStart"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "randomComponent"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type controlTypeAvailableEvent = TypedEvent<[], {}>;

export type controlTypeAvailableEventFilter =
  TypedEventFilter<controlTypeAvailableEvent>;

export type qualityControlDoneEvent = TypedEvent<[], {}>;

export type qualityControlDoneEventFilter =
  TypedEventFilter<qualityControlDoneEvent>;

export type qualityControlStartEvent = TypedEvent<[], {}>;

export type qualityControlStartEventFilter =
  TypedEventFilter<qualityControlStartEvent>;

export type randomComponentEvent = TypedEvent<[number], { id: number }>;

export type randomComponentEventFilter = TypedEventFilter<randomComponentEvent>;

export interface ScheduleTheRandomness extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ScheduleTheRandomnessInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ETH(overrides?: CallOverrides): Promise<[string]>;

    airnode(overrides?: CallOverrides): Promise<[string]>;

    airnodeRrp(overrides?: CallOverrides): Promise<[string]>;

    cancelQualityTypeByID(
      _taskId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkQualityPlanIsActive(
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    checkerIsRandomized(
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    components(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number] & {
        timestamp: BigNumber;
        id: number;
        status: number;
      }
    >;

    controlId(overrides?: CallOverrides): Promise<[BigNumber]>;

    controls(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        id: BigNumber;
        employeeId: BigNumber;
        controlType: number;
      }
    >;

    createQualityPlanTask(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createTaskQualityControl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    doQualityControl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    employeeId(overrides?: CallOverrides): Promise<[BigNumber]>;

    endpointIdUint256Array(overrides?: CallOverrides): Promise<[string]>;

    expectingRequestWithIdToBeFulfilled(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    fulfillRandomComponents(
      requestId: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gelato(overrides?: CallOverrides): Promise<[string]>;

    getLastControlId(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRandomComponents(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRandomControlType(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isRandomnize(
      overrides?: CallOverrides
    ): Promise<[boolean] & { ready: boolean }>;

    lastLaunched(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestRandomizingBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    makeRequestAPI3RandomComponents(
      size: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nrLaunches(overrides?: CallOverrides): Promise<[BigNumber]>;

    ops(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    planIsActive(overrides?: CallOverrides): Promise<[boolean]>;

    qrngUint256Array(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    qualityControlDelivered(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    randomness(overrides?: CallOverrides): Promise<[number]>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestEmployeByChainlink(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    s_requestId(overrides?: CallOverrides): Promise<[BigNumber]>;

    setRequestParameters(
      _airnode: string,
      _endpointIdUint256Array: BytesLike,
      _sponsorWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sponsorWallet(overrides?: CallOverrides): Promise<[string]>;

    startQualityPlan(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    status(overrides?: CallOverrides): Promise<[number]>;

    stopQualityControl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    taskIdByBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ETH(overrides?: CallOverrides): Promise<string>;

  airnode(overrides?: CallOverrides): Promise<string>;

  airnodeRrp(overrides?: CallOverrides): Promise<string>;

  cancelQualityTypeByID(
    _taskId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkQualityPlanIsActive(
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

  checkerIsRandomized(
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

  components(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number] & {
      timestamp: BigNumber;
      id: number;
      status: number;
    }
  >;

  controlId(overrides?: CallOverrides): Promise<BigNumber>;

  controls(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      id: BigNumber;
      employeeId: BigNumber;
      controlType: number;
    }
  >;

  createQualityPlanTask(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createTaskQualityControl(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  doQualityControl(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  employeeId(overrides?: CallOverrides): Promise<BigNumber>;

  endpointIdUint256Array(overrides?: CallOverrides): Promise<string>;

  expectingRequestWithIdToBeFulfilled(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  fulfillRandomComponents(
    requestId: BytesLike,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gelato(overrides?: CallOverrides): Promise<string>;

  getLastControlId(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRandomComponents(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRandomControlType(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isRandomnize(overrides?: CallOverrides): Promise<boolean>;

  lastLaunched(overrides?: CallOverrides): Promise<BigNumber>;

  latestRandomizingBlock(overrides?: CallOverrides): Promise<BigNumber>;

  makeRequestAPI3RandomComponents(
    size: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nrLaunches(overrides?: CallOverrides): Promise<BigNumber>;

  ops(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  planIsActive(overrides?: CallOverrides): Promise<boolean>;

  qrngUint256Array(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  qualityControlDelivered(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  randomness(overrides?: CallOverrides): Promise<number>;

  rawFulfillRandomWords(
    requestId: BigNumberish,
    randomWords: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestEmployeByChainlink(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  s_requestId(overrides?: CallOverrides): Promise<BigNumber>;

  setRequestParameters(
    _airnode: string,
    _endpointIdUint256Array: BytesLike,
    _sponsorWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sponsorWallet(overrides?: CallOverrides): Promise<string>;

  startQualityPlan(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  status(overrides?: CallOverrides): Promise<number>;

  stopQualityControl(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  taskIdByBlock(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawContract(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ETH(overrides?: CallOverrides): Promise<string>;

    airnode(overrides?: CallOverrides): Promise<string>;

    airnodeRrp(overrides?: CallOverrides): Promise<string>;

    cancelQualityTypeByID(
      _taskId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    checkQualityPlanIsActive(
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    checkerIsRandomized(
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    components(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number] & {
        timestamp: BigNumber;
        id: number;
        status: number;
      }
    >;

    controlId(overrides?: CallOverrides): Promise<BigNumber>;

    controls(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        id: BigNumber;
        employeeId: BigNumber;
        controlType: number;
      }
    >;

    createQualityPlanTask(overrides?: CallOverrides): Promise<void>;

    createTaskQualityControl(overrides?: CallOverrides): Promise<void>;

    doQualityControl(overrides?: CallOverrides): Promise<void>;

    employeeId(overrides?: CallOverrides): Promise<BigNumber>;

    endpointIdUint256Array(overrides?: CallOverrides): Promise<string>;

    expectingRequestWithIdToBeFulfilled(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    fulfillRandomComponents(
      requestId: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    gelato(overrides?: CallOverrides): Promise<string>;

    getLastControlId(overrides?: CallOverrides): Promise<BigNumber>;

    getRandomComponents(overrides?: CallOverrides): Promise<[number, number]>;

    getRandomControlType(overrides?: CallOverrides): Promise<number>;

    isRandomnize(overrides?: CallOverrides): Promise<boolean>;

    lastLaunched(overrides?: CallOverrides): Promise<BigNumber>;

    latestRandomizingBlock(overrides?: CallOverrides): Promise<BigNumber>;

    makeRequestAPI3RandomComponents(
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nrLaunches(overrides?: CallOverrides): Promise<BigNumber>;

    ops(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    planIsActive(overrides?: CallOverrides): Promise<boolean>;

    qrngUint256Array(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    qualityControlDelivered(overrides?: CallOverrides): Promise<void>;

    randomness(overrides?: CallOverrides): Promise<number>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestEmployeByChainlink(overrides?: CallOverrides): Promise<void>;

    s_requestId(overrides?: CallOverrides): Promise<BigNumber>;

    setRequestParameters(
      _airnode: string,
      _endpointIdUint256Array: BytesLike,
      _sponsorWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sponsorWallet(overrides?: CallOverrides): Promise<string>;

    startQualityPlan(overrides?: CallOverrides): Promise<void>;

    status(overrides?: CallOverrides): Promise<number>;

    stopQualityControl(overrides?: CallOverrides): Promise<void>;

    taskIdByBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawContract(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "controlTypeAvailable()"(): controlTypeAvailableEventFilter;
    controlTypeAvailable(): controlTypeAvailableEventFilter;

    "qualityControlDone()"(): qualityControlDoneEventFilter;
    qualityControlDone(): qualityControlDoneEventFilter;

    "qualityControlStart()"(): qualityControlStartEventFilter;
    qualityControlStart(): qualityControlStartEventFilter;

    "randomComponent(uint8)"(id?: null): randomComponentEventFilter;
    randomComponent(id?: null): randomComponentEventFilter;
  };

  estimateGas: {
    ETH(overrides?: CallOverrides): Promise<BigNumber>;

    airnode(overrides?: CallOverrides): Promise<BigNumber>;

    airnodeRrp(overrides?: CallOverrides): Promise<BigNumber>;

    cancelQualityTypeByID(
      _taskId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkQualityPlanIsActive(overrides?: CallOverrides): Promise<BigNumber>;

    checkerIsRandomized(overrides?: CallOverrides): Promise<BigNumber>;

    components(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controlId(overrides?: CallOverrides): Promise<BigNumber>;

    controls(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    createQualityPlanTask(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createTaskQualityControl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    doQualityControl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    employeeId(overrides?: CallOverrides): Promise<BigNumber>;

    endpointIdUint256Array(overrides?: CallOverrides): Promise<BigNumber>;

    expectingRequestWithIdToBeFulfilled(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fulfillRandomComponents(
      requestId: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gelato(overrides?: CallOverrides): Promise<BigNumber>;

    getLastControlId(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRandomComponents(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRandomControlType(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isRandomnize(overrides?: CallOverrides): Promise<BigNumber>;

    lastLaunched(overrides?: CallOverrides): Promise<BigNumber>;

    latestRandomizingBlock(overrides?: CallOverrides): Promise<BigNumber>;

    makeRequestAPI3RandomComponents(
      size: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nrLaunches(overrides?: CallOverrides): Promise<BigNumber>;

    ops(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    planIsActive(overrides?: CallOverrides): Promise<BigNumber>;

    qrngUint256Array(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    qualityControlDelivered(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    randomness(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestEmployeByChainlink(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    s_requestId(overrides?: CallOverrides): Promise<BigNumber>;

    setRequestParameters(
      _airnode: string,
      _endpointIdUint256Array: BytesLike,
      _sponsorWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sponsorWallet(overrides?: CallOverrides): Promise<BigNumber>;

    startQualityPlan(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    stopQualityControl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    taskIdByBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    airnode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    airnodeRrp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelQualityTypeByID(
      _taskId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkQualityPlanIsActive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkerIsRandomized(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    components(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controlId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controls(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createQualityPlanTask(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createTaskQualityControl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    doQualityControl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    employeeId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endpointIdUint256Array(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expectingRequestWithIdToBeFulfilled(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fulfillRandomComponents(
      requestId: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gelato(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastControlId(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRandomComponents(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRandomControlType(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isRandomnize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastLaunched(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestRandomizingBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeRequestAPI3RandomComponents(
      size: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nrLaunches(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ops(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    planIsActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    qrngUint256Array(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    qualityControlDelivered(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    randomness(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestEmployeByChainlink(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    s_requestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRequestParameters(
      _airnode: string,
      _endpointIdUint256Array: BytesLike,
      _sponsorWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sponsorWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startQualityPlan(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stopQualityControl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    taskIdByBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
