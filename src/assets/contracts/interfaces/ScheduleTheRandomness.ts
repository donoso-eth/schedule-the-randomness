/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ScheduleTheRandomnessInterface extends utils.Interface {
  functions: {
    "ETH()": FunctionFragment;
    "addConsumer()": FunctionFragment;
    "airnode()": FunctionFragment;
    "airnodeRrp()": FunctionFragment;
    "cancelTaskById(bytes32)": FunctionFragment;
    "checkQualityPlanIsActive()": FunctionFragment;
    "checkerIsRandomized()": FunctionFragment;
    "components(uint8)": FunctionFragment;
    "createQualityPlanTask()": FunctionFragment;
    "createTaskQualityControl()": FunctionFragment;
    "doQualityControl()": FunctionFragment;
    "employeId()": FunctionFragment;
    "endpointIdUint256()": FunctionFragment;
    "endpointIdUint256Array()": FunctionFragment;
    "expectingRequestWithIdToBeFulfilled(bytes32)": FunctionFragment;
    "fulfillUint256Array(bytes32,bytes)": FunctionFragment;
    "gelato()": FunctionFragment;
    "getRandomComponents()": FunctionFragment;
    "getRandomControlType()": FunctionFragment;
    "getRandomNumber()": FunctionFragment;
    "isRandomnize()": FunctionFragment;
    "latestRandomizingBlock()": FunctionFragment;
    "makeRequestUint256Array(uint256)": FunctionFragment;
    "ops()": FunctionFragment;
    "owner()": FunctionFragment;
    "qrngUint256Array(uint256)": FunctionFragment;
    "qualityControlDelivered()": FunctionFragment;
    "randomness()": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestEmployeByChainlink()": FunctionFragment;
    "s_requestId()": FunctionFragment;
    "setRequestParameters(address,bytes32,address)": FunctionFragment;
    "sponsorWallet()": FunctionFragment;
    "startQualityPlan()": FunctionFragment;
    "stopQualityControl()": FunctionFragment;
    "taskIdByBlock(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawContract()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addConsumer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "airnode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "airnodeRrp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTaskById",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkQualityPlanIsActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkerIsRandomized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "components",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createQualityPlanTask",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createTaskQualityControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "doQualityControl",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "employeId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "endpointIdUint256",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endpointIdUint256Array",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expectingRequestWithIdToBeFulfilled",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillUint256Array",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "gelato", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRandomComponents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomControlType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRandomnize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestRandomizingBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeRequestUint256Array",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ops", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "qrngUint256Array",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "qualityControlDelivered",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "randomness",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestEmployeByChainlink",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_requestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRequestParameters",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startQualityPlan",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stopQualityControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taskIdByBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawContract",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "airnode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "airnodeRrp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelTaskById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkQualityPlanIsActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkerIsRandomized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "components", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createQualityPlanTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTaskQualityControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doQualityControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "employeId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endpointIdUint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endpointIdUint256Array",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expectingRequestWithIdToBeFulfilled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillUint256Array",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gelato", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRandomComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomControlType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRandomnize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRandomizingBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeRequestUint256Array",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ops", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "qrngUint256Array",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "qualityControlDelivered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "randomness", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestEmployeByChainlink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_requestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequestParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startQualityPlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopQualityControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taskIdByBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawContract",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "ReceivedUint256Array(bytes32,uint256[])": EventFragment;
    "RequestedUint256Array(bytes32,uint256)": EventFragment;
    "qualityControl()": EventFragment;
    "randomComponent(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedUint256Array"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestedUint256Array"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "qualityControl"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "randomComponent"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type ReceivedUint256ArrayEvent = TypedEvent<
  [string, BigNumber[]],
  { requestId: string; response: BigNumber[] }
>;

export type ReceivedUint256ArrayEventFilter =
  TypedEventFilter<ReceivedUint256ArrayEvent>;

export type RequestedUint256ArrayEvent = TypedEvent<
  [string, BigNumber],
  { requestId: string; size: BigNumber }
>;

export type RequestedUint256ArrayEventFilter =
  TypedEventFilter<RequestedUint256ArrayEvent>;

export type qualityControlEvent = TypedEvent<[], {}>;

export type qualityControlEventFilter = TypedEventFilter<qualityControlEvent>;

export type randomComponentEvent = TypedEvent<[number], { id: number }>;

export type randomComponentEventFilter = TypedEventFilter<randomComponentEvent>;

export interface ScheduleTheRandomness extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ScheduleTheRandomnessInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ETH(overrides?: CallOverrides): Promise<[string]>;

    addConsumer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    airnode(overrides?: CallOverrides): Promise<[string]>;

    airnodeRrp(overrides?: CallOverrides): Promise<[string]>;

    cancelTaskById(
      _taskId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkQualityPlanIsActive(
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    checkerIsRandomized(
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    components(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number] & {
        timestamp: BigNumber;
        id: number;
        status: number;
      }
    >;

    createQualityPlanTask(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createTaskQualityControl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    doQualityControl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    employeId(overrides?: CallOverrides): Promise<[BigNumber]>;

    endpointIdUint256(overrides?: CallOverrides): Promise<[string]>;

    endpointIdUint256Array(overrides?: CallOverrides): Promise<[string]>;

    expectingRequestWithIdToBeFulfilled(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    fulfillUint256Array(
      requestId: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gelato(overrides?: CallOverrides): Promise<[string]>;

    getRandomComponents(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRandomControlType(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRandomNumber(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isRandomnize(
      overrides?: CallOverrides
    ): Promise<[boolean] & { ready: boolean }>;

    latestRandomizingBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    makeRequestUint256Array(
      size: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ops(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    qrngUint256Array(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    qualityControlDelivered(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    randomness(overrides?: CallOverrides): Promise<[number]>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestEmployeByChainlink(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    s_requestId(overrides?: CallOverrides): Promise<[BigNumber]>;

    setRequestParameters(
      _airnode: string,
      _endpointIdUint256Array: BytesLike,
      _sponsorWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sponsorWallet(overrides?: CallOverrides): Promise<[string]>;

    startQualityPlan(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopQualityControl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    taskIdByBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ETH(overrides?: CallOverrides): Promise<string>;

  addConsumer(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  airnode(overrides?: CallOverrides): Promise<string>;

  airnodeRrp(overrides?: CallOverrides): Promise<string>;

  cancelTaskById(
    _taskId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkQualityPlanIsActive(
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

  checkerIsRandomized(
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

  components(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number] & {
      timestamp: BigNumber;
      id: number;
      status: number;
    }
  >;

  createQualityPlanTask(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createTaskQualityControl(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  doQualityControl(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  employeId(overrides?: CallOverrides): Promise<BigNumber>;

  endpointIdUint256(overrides?: CallOverrides): Promise<string>;

  endpointIdUint256Array(overrides?: CallOverrides): Promise<string>;

  expectingRequestWithIdToBeFulfilled(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  fulfillUint256Array(
    requestId: BytesLike,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gelato(overrides?: CallOverrides): Promise<string>;

  getRandomComponents(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRandomControlType(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRandomNumber(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isRandomnize(overrides?: CallOverrides): Promise<boolean>;

  latestRandomizingBlock(overrides?: CallOverrides): Promise<BigNumber>;

  makeRequestUint256Array(
    size: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ops(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  qrngUint256Array(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  qualityControlDelivered(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  randomness(overrides?: CallOverrides): Promise<number>;

  rawFulfillRandomWords(
    requestId: BigNumberish,
    randomWords: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestEmployeByChainlink(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  s_requestId(overrides?: CallOverrides): Promise<BigNumber>;

  setRequestParameters(
    _airnode: string,
    _endpointIdUint256Array: BytesLike,
    _sponsorWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sponsorWallet(overrides?: CallOverrides): Promise<string>;

  startQualityPlan(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopQualityControl(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  taskIdByBlock(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawContract(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ETH(overrides?: CallOverrides): Promise<string>;

    addConsumer(overrides?: CallOverrides): Promise<void>;

    airnode(overrides?: CallOverrides): Promise<string>;

    airnodeRrp(overrides?: CallOverrides): Promise<string>;

    cancelTaskById(
      _taskId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    checkQualityPlanIsActive(
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    checkerIsRandomized(
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    components(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number] & {
        timestamp: BigNumber;
        id: number;
        status: number;
      }
    >;

    createQualityPlanTask(overrides?: CallOverrides): Promise<void>;

    createTaskQualityControl(overrides?: CallOverrides): Promise<void>;

    doQualityControl(overrides?: CallOverrides): Promise<void>;

    employeId(overrides?: CallOverrides): Promise<BigNumber>;

    endpointIdUint256(overrides?: CallOverrides): Promise<string>;

    endpointIdUint256Array(overrides?: CallOverrides): Promise<string>;

    expectingRequestWithIdToBeFulfilled(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    fulfillUint256Array(
      requestId: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    gelato(overrides?: CallOverrides): Promise<string>;

    getRandomComponents(overrides?: CallOverrides): Promise<[number, number]>;

    getRandomControlType(overrides?: CallOverrides): Promise<number>;

    getRandomNumber(overrides?: CallOverrides): Promise<void>;

    isRandomnize(overrides?: CallOverrides): Promise<boolean>;

    latestRandomizingBlock(overrides?: CallOverrides): Promise<BigNumber>;

    makeRequestUint256Array(
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ops(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    qrngUint256Array(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    qualityControlDelivered(overrides?: CallOverrides): Promise<void>;

    randomness(overrides?: CallOverrides): Promise<number>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestEmployeByChainlink(overrides?: CallOverrides): Promise<void>;

    s_requestId(overrides?: CallOverrides): Promise<BigNumber>;

    setRequestParameters(
      _airnode: string,
      _endpointIdUint256Array: BytesLike,
      _sponsorWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sponsorWallet(overrides?: CallOverrides): Promise<string>;

    startQualityPlan(overrides?: CallOverrides): Promise<void>;

    stopQualityControl(overrides?: CallOverrides): Promise<void>;

    taskIdByBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawContract(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ReceivedUint256Array(bytes32,uint256[])"(
      requestId?: BytesLike | null,
      response?: null
    ): ReceivedUint256ArrayEventFilter;
    ReceivedUint256Array(
      requestId?: BytesLike | null,
      response?: null
    ): ReceivedUint256ArrayEventFilter;

    "RequestedUint256Array(bytes32,uint256)"(
      requestId?: BytesLike | null,
      size?: null
    ): RequestedUint256ArrayEventFilter;
    RequestedUint256Array(
      requestId?: BytesLike | null,
      size?: null
    ): RequestedUint256ArrayEventFilter;

    "qualityControl()"(): qualityControlEventFilter;
    qualityControl(): qualityControlEventFilter;

    "randomComponent(uint8)"(id?: null): randomComponentEventFilter;
    randomComponent(id?: null): randomComponentEventFilter;
  };

  estimateGas: {
    ETH(overrides?: CallOverrides): Promise<BigNumber>;

    addConsumer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    airnode(overrides?: CallOverrides): Promise<BigNumber>;

    airnodeRrp(overrides?: CallOverrides): Promise<BigNumber>;

    cancelTaskById(
      _taskId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkQualityPlanIsActive(overrides?: CallOverrides): Promise<BigNumber>;

    checkerIsRandomized(overrides?: CallOverrides): Promise<BigNumber>;

    components(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createQualityPlanTask(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createTaskQualityControl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    doQualityControl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    employeId(overrides?: CallOverrides): Promise<BigNumber>;

    endpointIdUint256(overrides?: CallOverrides): Promise<BigNumber>;

    endpointIdUint256Array(overrides?: CallOverrides): Promise<BigNumber>;

    expectingRequestWithIdToBeFulfilled(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fulfillUint256Array(
      requestId: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gelato(overrides?: CallOverrides): Promise<BigNumber>;

    getRandomComponents(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRandomControlType(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRandomNumber(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isRandomnize(overrides?: CallOverrides): Promise<BigNumber>;

    latestRandomizingBlock(overrides?: CallOverrides): Promise<BigNumber>;

    makeRequestUint256Array(
      size: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ops(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    qrngUint256Array(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    qualityControlDelivered(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    randomness(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestEmployeByChainlink(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    s_requestId(overrides?: CallOverrides): Promise<BigNumber>;

    setRequestParameters(
      _airnode: string,
      _endpointIdUint256Array: BytesLike,
      _sponsorWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sponsorWallet(overrides?: CallOverrides): Promise<BigNumber>;

    startQualityPlan(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopQualityControl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    taskIdByBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addConsumer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    airnode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    airnodeRrp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelTaskById(
      _taskId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkQualityPlanIsActive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkerIsRandomized(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    components(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createQualityPlanTask(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createTaskQualityControl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    doQualityControl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    employeId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endpointIdUint256(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endpointIdUint256Array(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expectingRequestWithIdToBeFulfilled(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fulfillUint256Array(
      requestId: BytesLike,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gelato(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRandomComponents(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRandomControlType(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRandomNumber(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isRandomnize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestRandomizingBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeRequestUint256Array(
      size: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ops(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    qrngUint256Array(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    qualityControlDelivered(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    randomness(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestEmployeByChainlink(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    s_requestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRequestParameters(
      _airnode: string,
      _endpointIdUint256Array: BytesLike,
      _sponsorWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sponsorWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startQualityPlan(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopQualityControl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    taskIdByBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
